apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "cse.dit012.lost"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Utilities
    implementation 'com.google.guava:guava:29.0-android'
    implementation 'net.sourceforge.streamsupport:android-retrofuture:1.7.2'

    // Misc Android
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    def core_version = "1.3.1"
    implementation "androidx.core:core:$core_version"
    implementation 'androidx.activity:activity:1.2.0-alpha08'
    implementation 'androidx.fragment:fragment:1.3.0-alpha08'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.android.support:cardview-v7:29.0.0'

    // Jetpack Architecture Components
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"

    // Jetpack Navigation Graph
    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"


    // Firebase authentication
    implementation 'com.google.firebase:firebase-auth:19.4.0'
    implementation 'com.google.android.gms:play-services-auth:18.1.0'


    // Google Play Services
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.5.0'
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.firebase:firebase-database:19.4.0'

    // Map with custom info windows
    implementation 'com.appolica:interactive-info-window:v1.0.6'

    // Testing ------------------------------------------------------------
    // Unit tests -----------------------

    testImplementation 'junit:junit:4.12' // JUnit

    // Instrumented tests ---------------

    // AndroidX Test
    androidTestImplementation 'androidx.test:core:1.3.0' // AndroidX Test Core
    androidTestImplementation 'androidx.test:runner:1.3.0' // AndroidJUnitRunner
    androidTestImplementation 'androidx.test:rules:1.3.0' // JUnit Rules
    androidTestImplementation 'androidx.test.ext:junit:1.1.2' // JUnit Assertions

    // UI tests (Espresso)
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Utils
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0' // For JUnit executor rules

    // Debug Implementation
    debugImplementation 'androidx.test:core:1.3.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

task openJacocoTestReport(dependsOn: ['jacocoTestReport']) {
    group = "Reporting"
    doLast {
        browse "$buildDir/reports/jacoco/jacocoTestReport/html/index.html"
    }
}

def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}